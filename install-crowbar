#!/bin/bash

set -e
set -u

# Source deployrc
source /home/rcb/.deployrc 

# Start by shepping it up so the rest of the script works
sleep 60

NBD_DEVICE=/dev/nbd1

apt-get install -y kpartx lvm2

mkdir -p /opt/rcb/crowbar
if [ ! -e ~rcb/crowbar.qcow2 ]; then
    echo "Downloading crowbar vm..."

    # Testing/Debugging location
    # cheeseburger
    wget -O /opt/rcb/crowbar/crowbar.qcow2 http://10.127.52.9/crowbar.qcow2

    # Fresh build location
    # wget http://build.monkeypuppetlabs.com/crowbar.qcow2 -O ~rcb/crowbar.qcow2

    # Cloud Files Location for use in production...
    # wget -O ~rcb/crowbar.qcow2 http://c271871.r71.cf1.rackcdn.com/crowbar.qcow2
fi

if [ ! -e /opt/rcb/crowbar/crowbar.qcow2 ]; then
    echo "Copying crowbar to /opt/rcb/crowbar"
    cp ~rcb/crowbar.qcow2 /opt/rcb/crowbar/crowbar.qcow2
fi

# 2 gigs of ram

if [ ! -e /opt/rcb/crowbar/crowbar.xml ]; then
    echo "Creating crowbar vm"
    cat > /opt/rcb/crowbar/crowbar.xml <<EOF
<domain type='kvm'>
  <name>crowbar</name>
  <memory>8388608</memory>
  <currentMemory>8388608</currentMemory>
  <vcpu>4</vcpu>
  <os>
    <type arch='x86_64' machine='pc-0.12'>hvm</type>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/bin/kvm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/opt/rcb/crowbar/crowbar.qcow2'/>
      <target dev='vda' bus='virtio'/>
      <alias name='virtio-disk0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </disk>
    <disk type='block' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <target dev='hdc' bus='ide'/>
      <readonly/>
      <alias name='ide0-1-0'/>
      <address type='drive' controller='0' bus='1' unit='0'/>
    </disk>
    <controller type='ide' index='0'>
      <alias name='ide0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <interface type='bridge'>
      <source bridge='br0'/>
      <target dev='vnet0'/>
      <model type='e1000'/>
      <alias name='net0'/>
    </interface>
    <interface type='bridge'>
      <source bridge='crowbarbr0'/>
      <target dev='vnet1'/>
      <model type='e1000'/>
      <alias name='net1'/>
    </interface>
    <serial type='pty'>
      <target port='0'/>
      <alias name='serial0'/>
    </serial>
    <console type='pty' tty='/dev/pts/1'>
      <target type='serial' port='0'/>
      <alias name='serial0'/>
    </console>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' autoport='yes'/>
    <sound model='ac97'>
      <alias name='sound0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
    </sound>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
      <alias name='video0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>
    <memballoon model='virtio'>
      <alias name='balloon0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </memballoon>
  </devices>
</domain>
EOF
fi

# this should make a permanent bridge...

if ( ! grep -q "crowbarbr0" /etc/network/interfaces ); then
    cat >> /etc/network/interfaces <<EOF
auto crowbarbr0
iface crowbarbr0 inet static
      address 192.168.125.9
      netmask 255.255.255.0
      bridge_ports none
      bridge_fd 0
      bridge_stp off
      bridge_maxwait 0

EOF
fi

if ( ! /sbin/ifconfig | grep -q "crowbarbr0" ); then
    ifup crowbarbr0 > /dev/null 2>&1
fi

# interface is there... disk is there... should drop an init script...
if ( ! virsh list --all | grep crowbar ); then
    virsh define /opt/rcb/crowbar/crowbar.xml
fi

if [ ! -e ~rcb/network.json ]; then
    echo "You don't have a network.json file.  Try again"
    exit 0
fi

# mount the disk image and insert the json
if ! lsmod | grep nbd; then
    modprobe nbd max_part=8
fi

# gawd qemu-nbd is suck
qemu-nbd -d ${NBD_DEVICE}
qemu-nbd -d ${NBD_DEVICE}
qemu-nbd -d ${NBD_DEVICE}
qemu-nbd -d ${NBD_DEVICE}

sleep 2
qemu-nbd -c ${NBD_DEVICE} /opt/rcb/crowbar/crowbar.qcow2

sleep 10
# kpartx -a ${NBD_DEVICE}
sleep 5
pvscan
sleep 5
lvscan
sleep 5
lvchange -ay /dev/unassigned-hostname/root
lvchange -ay /dev/unassigned-hostname/swap_1
sleep 5

mkdir -p /mnt/crowbar
mount /dev/mapper/unassigned--hostname-root /mnt/crowbar
cp /home/rcb/network.json /mnt/crowbar/opt/dell/barclamps/network/chef/data_bags/crowbar/bc-template-network.json 
cp /home/rcb/firstboot.sh /mnt/crowbar/home/crowbar/firstboot.sh
sed -i '/^exit/i /bin/bash /home/crowbar/firstboot.sh >> /var/log/firstboot.log 2>&1' /mnt/crowbar/etc/rc.local

cat > /mnt/crowbar/etc/network/interfaces <<EOF
auto  lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address ${CROWBAR}
    netmask ${NETMASK}
    gateway ${GATEWAY}

auto eth1
iface eth1 inet static
    address 192.168.125.10
    netmask 255.255.255.0
EOF

cat > /mnt/crowbar/etc/resolv.conf <<EOF
nameserver 64.39.2.170
EOF


#wget https://github.com/pmullaney/barclamp-deployer/raw/62fa46f53460fb7ff220d28915aff26f2c25e155/chef/cookbooks/ohai/files/default/plugins/crowbar.rb -O /mnt/crowbar/opt/dell/barclamps/deployer/chef/cookbooks/ohai/files/default/plugins/crowbar.rb

umount /mnt/crowbar

lvchange -an /dev/unassigned-hostname/root
lvchange -an /dev/unassigned-hostname/swap_1

kpartx -d ${NBD_DEVICE}
qemu-nbd -d ${NBD_DEVICE}

# Remove from rc.local
sed -i '/install-crowbar/d' /etc/rc.local

virsh start crowbar
